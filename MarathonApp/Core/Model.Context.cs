//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarathonApp.Core
{
    using Microsoft.EntityFrameworkCore;
    using System;
    using System.Diagnostics;
    using System.IO;

    public partial class user3Entities : DbContext
    {
        public user3Entities() : base()
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                //optionsBuilder.UseSqlite("Filename=/sdcard/Download/sqlite.db");
                optionsBuilder.UseSqlite("Filename=" + Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), "sqlite.db"));
                //optionsBuilder.UseSqlServer("Data Source=DESKTOP-AQD22H7;Initial Catalog=user3;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<RunnerMarathon>(builder =>
            {
                builder.HasAlternateKey(x => x.Id);
                builder.HasOne(x => x.Runner).WithMany(x => x.RunnerMarathon).HasForeignKey(x => x.RunnerId);
                builder.HasOne(x => x.user3).WithMany(x => x.RunnerMarathon).HasForeignKey(x => x.MarathonId);
                builder.ToTable("RunnerMarathon");
            });
            modelBuilder.Entity<User>(builder =>
            {
                builder.HasMany(x => x.Runner).WithOne(x => x.User).HasForeignKey(x => x.Email);
                builder.HasMany(x => x.Staff).WithOne(x => x.User).HasForeignKey(x => x.Email);
                builder.HasMany(x => x.Volunteer).WithOne(x => x.User).HasForeignKey(x => x.Email);
                builder.HasOne(x => x.Role).WithMany(x => x.User).HasForeignKey(x => x.RoleId);
                builder.ToTable("User");
            });
            modelBuilder.Entity<Runner>(builder =>
            {
                builder.HasOne(x => x.Country).WithMany(x => x.Runner).HasForeignKey(x => x.CountryCode);
                builder.HasOne(x => x.Gender1).WithMany(x => x.Runner).HasForeignKey(x => x.Gender);
                builder.HasOne(x => x.User).WithMany(x => x.Runner).HasForeignKey(x => x.Email);
                builder.HasMany(x => x.Registration).WithOne(x => x.Runner);
                builder.HasMany(x => x.Sponsor).WithOne(x => x.Runner);
                builder.HasMany(x => x.RunnerMarathon).WithOne(x => x.Runner).HasForeignKey(x => x.RunnerId);
                builder.ToTable("Runner");
            });
            modelBuilder.Entity<Volunteer>(builder =>
            {
                builder.HasOne(x => x.Country).WithMany(x => x.Volunteer).HasForeignKey(x => x.CountryCode);
                builder.HasOne(x => x.Gender1).WithMany(x => x.Volunteer).HasForeignKey(x => x.Gender);
                builder.HasOne(x => x.User).WithMany(x => x.Volunteer).HasForeignKey(x => x.Email);
                builder.HasMany(x => x.Review).WithOne(x => x.Volunteer).HasForeignKey(x => x.VolunteerId);
                builder.ToTable("Volunteer");
            });
            modelBuilder.Entity<Sponsor>(builder =>
            {
                builder.HasOne(x => x.Charity).WithMany(x => x.Sponsor).HasForeignKey(x => x.CharityId);
                builder.ToTable("Sponsor");
            });
            modelBuilder.Entity<user3>(builder =>
            {
                builder.HasOne(x => x.Country).WithMany(x => x.user3).HasForeignKey(x => x.CountryCode);
                builder.HasMany(x => x.Review).WithOne(x => x.user3).HasForeignKey(x => x.MarathonId);
                builder.ToTable("user3");
            });
            modelBuilder.Entity<Registration>(builder =>
            {
                builder.HasOne(x => x.RegistrationStatus).WithMany(x => x.Registration).HasForeignKey(x => x.RegistrationStatusId);
                builder.HasOne(x => x.Charity).WithMany(x => x.Registration).HasForeignKey(x => x.CharityId);
                builder.HasOne(x => x.RaceKitOption).WithMany(x => x.Registration).HasForeignKey(x => x.RaceKitOptionId);
                builder.HasMany(x => x.RegistrationEvent).WithOne(x => x.Registration).HasForeignKey(x => x.RegistrationEventId);
                builder.HasMany(x => x.Sponsorship).WithOne(x => x.Registration).HasForeignKey(x => x.SponsorshipId);
                builder.ToTable("Registration");
            });
        }

        public virtual DbSet<Charity> Charity { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Event> Event { get; set; }
        public virtual DbSet<EventType> EventType { get; set; }
        public virtual DbSet<Gender> Gender { get; set; }
        public virtual DbSet<Position> Position { get; set; }
        public virtual DbSet<RaceKitOption> RaceKitOption { get; set; }
        public virtual DbSet<Registration> Registration { get; set; }
        public virtual DbSet<RegistrationEvent> RegistrationEvent { get; set; }
        public virtual DbSet<RegistrationStatus> RegistrationStatus { get; set; }
        public virtual DbSet<Review> Review { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<Runner> Runner { get; set; }
        public virtual DbSet<Sponsor> Sponsor { get; set; }
        public virtual DbSet<Sponsorship> Sponsorship { get; set; }
        public virtual DbSet<Staff> Staff { get; set; }
        public virtual DbSet<Timesheet> Timesheet { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<user3> user3 { get; set; }
        public virtual DbSet<Volunteer> Volunteer { get; set; }
        public virtual DbSet<HowLong> HowLong { get; set; }
        public virtual DbSet<RunnerMarathon> RunnerMarathon { get; set; }
    }
}
